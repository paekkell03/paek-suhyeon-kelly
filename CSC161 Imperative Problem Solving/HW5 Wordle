    /***********************************************************************
     * Name(s)  Kelly Paek                                                 *
     * Assignment name (Homework 5 Wordle)                                 *
     * Help obtained:                                                      *
     * King, K. N. (2008). C Programming: A Modern Approach . W.W. Norton  *
     * & Company.                                                          *
     * https://eikmeier.sites.grinnell.edu/csc-161-fall-2023/readings/wordl*
     * e.html                                                              *
     * Due Date 11/22                                                      *
     ***********************************************************************/

    /* *********************************************************************
     * Academic honesty certification:                                     *
     *   Written/online sources used:                                      *
     *     [include textbook(s), CSC 161 labs or readings;                 *
     *       complete citations for Web or other written sources           *
     *      write "none" if no sources used]                               *
     *   Help obtained                                                     *
     *     [indicate names of instructor, class mentors                    *
     *      or evening tutors, consulted according to class policy;        *
     *      write "none" if none of these sources used]                    *
     *     ["none" required for Homework Problems                          *
     *   My/our typed name(s) below confirms that the above list of sources*
     *   is complete AND that I/we have not talked to anyone else          *
     *   (e.g., CSC 161 students, tutors) about the solutions              *
     *                                                                     *
     *   Signature:  Kelly Paek                                            *
     ***********************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <ctype.h>


/*
void get_guess(const int turn, char *guess);
Function: A function that prompts the user for a guess and populates the char buffer 
          pointed to by guess with that guess
Precondition: turn is an integer and character buffer pointed to by guess is at least six characters long
Postcondition: System prints "Guess _turn_" and takes input, and stores it in guess.
*/
char * get_guess(const int turn) {
    char * guess = malloc(sizeof(char) * 6);
    printf("Guess %d:", turn+1);
    for(int i = 0; i < 5; i++) {
        guess[i] = tolower(getchar());
    }
    getchar();
    guess[5] = '\0';
    return guess;
}

/*
int check_guess(const char *guess, const char *target, char result []);
Function: A function that checks each letter of the guess and returns the number of exact matches, and 
          populates return with 'g', 'y', or 'x' according to whether the user for the position and
          letter correct in the guess
Precondition: character buffer pointed to by guess, target, and result is at least six characters long
Postcondition: returns the number of exact matches and saves 'g', 'y', or 'x' in result
*/
int check_guess(const char *guess, const char *target, char * result) {
    int exact = 0;
    for (int i = 0; i < 5; i++) {
        result[i] = 'x';
    }
    result[5] = '\0';
    for (int i = 0; i < 5; i++) {
        if (guess[i] == target[i]) {
            exact ++;
            result[i] = 'g';
        } else {
            for (int j = 0; j < 5; j++) {
                if (guess[i] == target[j]){
                    result[i] = 'y';
                }
            }
        }
    }
    return exact;
}

/*
void print_report(const char *guess, const char result []);
Function: A function that prints guess with characters highlighted accordingly: green if both letter and position
          is right, yellow if the letter is in target but its not in the right position, and not
          highlighted if none are correct.
Preconditions: character buffer pointed to by guess is at least six characters long and result contains 'g' or 'y'
Postcondition: Prints guess with characters highlighted accordingly: green if both letter and position is right, 
               yellow if the letter is in target but its not in the right position, and not highlighted if none 
               are correct.
*/
void print_report(const char *guess, const char * result) {
    for (int i = 0; i < 5; i++) {
        if (result[i] == 'g') {
            printf("\033[1;37;42m%c\033[0m", guess[i]);
        } else if (result[i] == 'y') {
            printf("\033[1;37;43m%c\033[0m", guess[i]);
        } else {
            printf("%c", guess[i]);
        }
    }
    printf("\n");
}


/*
void play_game(const char *target);
Function: Function that plays a complete game of Wordle on the command line using the functions
          made above.
Precondition: character buffer pointed to by target is at least six characters long
Postcondition: Plays Wordle
*/
void play_game(const char * target) {
    printf("%s\n", target);
    char * guess;
    char result[6];
    for (int i = 0; i < 6; i++) {
        guess = get_guess(i);
        check_guess(guess, target, result);
        print_report(guess, result);
        if (strcmp(guess, target) == 0) {
            i = 6;
            printf("Yay! You guess the word right!\n");
        }
    }
}

int main(int argc, char* argv[]) {
    srand(time(NULL));

    FILE *stream = fopen("words5.txt", "r");

    //char *dictionary [] = {"apple", "candy", "hello", "fresh", "happy", "heart", "cloud", "daisy"};
    //words5.txt as a 2D array; 12972 lines and 6 columns
    char * words5[12972];
    for (int i = 0; i < 12972; i++) {
        words5[i] = malloc(sizeof(char)*6);
        fgets(words5[i], 6, stream);
        words5[i][5] = '\0';
    }
    fclose(stream);
    int random = rand()%12973;

    char * target = words5[random];
    play_game(target);
    
    return 0;
}
